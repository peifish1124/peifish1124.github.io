[{"content":"Encapsulation 封裝 使用者不需要知道背後的實作內容，只需要知道 method 提供的介面怎麼使用就好 像是一個 class 可能有 private method，自己內部去操作，別人不會知道這個 method Inheritance 繼承 假如現在有一個 class Cat\n1 2 3 4 5 6 7 8 9 10 11 class Cat { private string name = \u0026#34;\u0026#34;; public Cat(string name) { this.name = name; } public string Shout() { return \u0026#34;我的名字叫做\u0026#34;+name+\u0026#34;喵\u0026#34;; } } 如果你想新增另一個 class Dog，功能和 Cat 差不多，你可以選擇去複製一模一樣的程式碼，只是 code 就重複了，不是好的寫法。 因此可以宣告一個 Animal 的 parent class，並把原本 private 改成 protected，讓 Cat \u0026amp; Dog 都去繼承這個 parent class。\nprivate: 只有該 class 可以 access protected: 只有該 class 跟他的 child class 可以 access public: 任何人都可以 access Polymorphism 多型 多載（Overloading）: 根據參數的個數和類型來決定使用哪一個方法 複寫（Overriding）: parent class 建立一個 virtual method，讓 children class override Abstract class vs. Interface: Abstract: 定義存在的東西、角色 (不可以被 new 出來的 class) Interface: 定義行為 舉例：看似不相關的東西，例如鳥跟竹蜻蜓，可能就不適合用 abstract，因為他們沒有共通的 property，一個是物品，一個是動物，但可以用 interface，因為共同行為是 fly Abstract method vs. Virtual method: abstract: 代表是抽象的，不會去寫一些共同的行為 會希望一定要去 override 他，在 compile time 中如果沒有去 override 可能就會報錯。 virtual: 可以寫一些共同行為，其他人看要不要 override 沒有 override 不會報錯，因為 virtual 可以定義共同的行為。 Generic 可以使用 Template 的方式在定義 method 或是 class 時不先宣告特定 type，而是用 T 代替。如此即能夠非常彈性地設計一個能夠接受不同 type 的 class。使用 Generic 可以將 class 定義成下面的樣子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class GenericList\u0026lt;T\u0026gt; { public void Add(T val) { // Add implementation } // other methods... } // 接著就可以透過 Generic 接收不同 type 並實作 List var numbers = new GenericList\u0026lt;int\u0026gt;(); numbers.Add(5) // 這時 compiler 就會自動提示說要 input int value var books = new GenericList\u0026lt;Book\u0026gt;(); books.Add(new Book()); ","date":"2024-02-25T00:00:00Z","permalink":"https://peifish1124.github.io/p/study-oop/","title":"OOP"},{"content":"資料庫管理系統（DBMS）是一種用於建立、維護和管理資料庫的軟體工具。它允許使用者操作資料庫，因此在日常使用中，當我們談論資料庫時，通常指的就是 DBMS，例如 MySQL。\nMySQL 基本架構 圖片來自：https://iter01.com/581014.html\n外掛式的儲存引擎架構將查詢處理和其它的系統任務以及資料的儲存提取相分離。這種架構允許根據業務需求和實際情況選擇合適的存儲引擎。\n1. 連線層 Connection Layer 通訊機制： 包括本地 socket 通訊 和 基於 client \u0026amp; server 端架構實現的 TCP/IP 的通訊方式。 本地 socket 通訊：可能同一台電腦或同一個 domain 的兩個應用程式之間的數據交換。 主要是想 確保數據能夠在不同的系統之間有效地傳輸。 連線管理： 主要負責 處理連線的建立、維護和斷開。 也包括授權認證和相關的安全機制，確保只有經過授權的用戶才能夠訪問系統 Thread Pool： 引入 thread pool 的概念，為通過認證且安全接入的客戶端分配 thread，來提高處理請求的速度。 安全連接： 該層可以實現基於 SSL 的安全連接，確保數據在傳輸過程中的加密和完整性。 權限驗證： 伺服器會 為每個安全接入的客戶端驗證其操作權限。 「連線管理」的「授權」：確定只有經過授權的用戶才能夠訪問系統。 「權限驗證」：則是 server 會為每個安全接入的客戶端驗證他的操作權限。 2. 服務層 Service Layer 主要負責執行大多數核心服務功能。 伺服器會 解析 SQL 查詢語句，建立內部的解析樹，並對其進行優化，例如決定查詢表的順序，判斷是否使用索引等，最終生成相應的執行計劃。 解析樹可以想像成它會將語句分解成不同的元件，如 SELECT、FROM、WHERE 等，並將它們組織成一個樹狀結構 SQL 接口(SQL interface)： 像是 MySQL 的大門，負責接收使用者的 SQL 指令並返回所需的查詢結果。 解析器(Parser)： 負責驗證和解析傳遞到解析器的 SQL 指令。 確保 SQL 語句的語法正確，並將其轉換成為 MySQL 可以理解的內部格式。 優化器(Optimizer)： 在查詢執行前，使用查詢優化器對 SQL 語句進行優化，如根據 where 條件決定執行順序，例如先進行過濾還是先進行投影。 快取與緩衝區(Caches \u0026amp; Buffers)： 如果查詢快取中有匹配的結果，查詢語句可以直接從查詢快取中獲取數據。 這種快取機制由多個小型快取組成，例如表快取、記錄快取、鍵快取、權限快取等。 表快取：快取表的結構信息 紀錄快取：快取表中的 row 鍵快取：快取 index 權限快取：快取用戶權限信息 3. 儲存引擎層 Storage Engine Layer 負責資料的邏輯儲存和提取 MySQL 是採用外掛式可替換的儲存引擎架構，將前面兩層所說的查詢處理 和 資料的儲存提取相分離，不同的儲存引擎支援不同的功能，可以根據業務需求和實際需要來選擇合適的儲存引擎。 MySQL server 是透過一套統一的 API 與不同的儲存引擎進行溝通，讓上層的應用不需要關心底層資料是如何儲存和管理的。 4. 資料儲存層 Data Storage Layer 負責將資料實際存儲到磁碟上 主要將數據存儲在裸設備上運行的文件系統中，並實現與存儲引擎的互動。 依賴於底層的檔案系統來管理磁碟上的資料塊，並提供給上層的儲存引擎所需的讀寫操作。 MySQL 查詢流程 圖片來自：https://iter01.com/581014.html\n客戶端向 MySQL 伺服器發送查詢請求（這其中包括 請求進入 thread pool → 授權檢查 → 分配 thread）。 伺服器首先檢查查詢快取，如果命中快取，則直接返回快取中的結果（同時進行權限檢查）。如果沒有命中快取，則進入下一階段。 伺服器對 SQL 進行解析和預處理（包括處理解析器無法解決的語義問題和權限檢查），然後由優化器生成相應的執行計劃。 MySQL 根據執行計劃，調用存儲引擎的 API 來執行查詢。 將查詢結果返回給客戶端，並將查詢結果存入快取。 參考文章 MySQL 的架構 步步深入：MySQL 架構總覽 -\u0026gt; 查詢執行流程 -\u0026gt; SQL 解析順序 如何避免分析兩分鐘，運行兩小時？這是一份 SQL 優化大全 ","date":"2024-02-15T00:00:00Z","permalink":"https://peifish1124.github.io/p/study-mysql/","title":"MySQL 基本架構和查詢流程"},{"content":" : https://github.com/peifish1124/ChiTou\n後端技術架構 Express.js、Nginx APIs: 中央氣象局開放資料 API、LINE Bot Messaging API、Google Search API、ChatGPT OpenAI Deploy: AWS EC2 Database: AWS RDS 發想動機 希望解決使用者在安排出遊的時候會遇到的問題：\n懶得用編輯程式、共編規劃行程 要開多個平台去整合各種資訊：用 Google docs 來紀錄、用 Google search 來查景點、用 Google map 來查景點間的距離、查詢天氣 提出了多種方案但不知道大家想選哪個行程 需要預估交通時間、停留時間 因此我們 ChiTou 的核心概念就是：整合共編、Google Search、Google Map、天氣資訊 的平台，節省使用者在安排旅行所需要的時間，並提供包含旅程所需時間的最終規劃結果\n","date":"2023-09-05T00:00:00Z","image":"https://peifish1124.github.io/p/project-chitou/chitou-pic_hu2fdbb00736556baa186e5a430251d7bc_103108_120x120_fill_box_smart1_3.png","permalink":"https://peifish1124.github.io/p/project-chitou/","title":"ChiTou"},{"content":"後端技術架構 後端： Express.js AWS Cloud Service：AWS EC2、AWS RDS(MySQL)、AWS Load Balancer 容器化工具：Docker CICD： GitHub Actions 測試： Jest 壓力測試：K6 Cache、Rate Limiter：Redis 基本實作 用 middleware 的方式實作 JWT 驗證使用者身份 大頭貼部分是用 middleware 的方式透過 multer 來實作 利用 cursor pagination 處理分頁 使用 Redis 作為快取，以加速資料取得，並且作為 rate limiter，用 IP 來判斷使用者是否在一定時間內超過次數的進入網站 前後端串接時申請 SSL 並處理 CORS 問題 透過 Nginx 處理 Http/Https 的請求導向 使用 Docker Container 執行 MySQL、Nginx、Redis \u0026amp; Express 程式（Canchu） 透過 GitHub Actions 實作 CI/CD 完成自動化測試與部署至 Docker ","date":"2023-08-03T00:00:00Z","permalink":"https://peifish1124.github.io/p/project-canchu/","title":"Canchu"},{"content":" : https://github.com/peifish1124/Pathfinder\n因應教育部的 108 新課綱，我們推出探索生涯方向的 APP - Pathfinder ，從一開始的現行方案分析、接續經過三階段需求確認與測試的市場調查，最後聚焦於創造出一個專屬於高中生學習歷程、生涯探索的 App。立基於 ColleGo! 網站資料上，Pathfinder 串接三大功能：紀錄面板、儀表分析板、探索活動板，以個人化推薦、整合性的功能為關鍵特色，旨在為使用者打造個別專屬的生涯探索之旅。\n在 APP 中我們採用文字探勘技術，協助高中生透過日常紀錄挖掘自我興趣與能力，而在過程中我們並非只著重在資訊技術上的精進，我們使用敏捷開發、階段式的做使用者調查訪問、與教育機構合作、規劃短中長期的發展模式等。\n系統架構圖 前端：React Native 後端：GraphQL 部署：Heroku 資料庫：非關聯式資料庫 mongoDB 照片儲存：AWS S3 ","date":"2021-11-24T00:00:00Z","image":"https://peifish1124.github.io/p/project-pathfinder/pathfinder-pic_huf212e8a73d369849f02f4979a9032ced_406233_120x120_fill_box_smart1_3.png","permalink":"https://peifish1124.github.io/p/project-pathfinder/","title":"Pathfinder"}]